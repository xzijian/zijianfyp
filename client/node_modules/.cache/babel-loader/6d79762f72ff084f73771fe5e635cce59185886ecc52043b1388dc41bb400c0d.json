{"ast":null,"code":"import cx from 'clsx';\nconst EMPTY_CLASS_NAMES = {};\nfunction mergeClassNames(objects) {\n  const merged = {};\n  objects.forEach(obj => {\n    Object.entries(obj).forEach(_ref => {\n      let [key, value] = _ref;\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n  return merged;\n}\nfunction resolveClassNames(_ref2) {\n  let {\n    theme,\n    classNames,\n    props,\n    stylesCtx\n  } = _ref2;\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map(item => typeof item === \"function\" ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES);\n  return mergeClassNames(resolvedClassNames);\n}\nexport { resolveClassNames };","map":{"version":3,"names":["EMPTY_CLASS_NAMES","mergeClassNames","objects","merged","forEach","obj","Object","entries","_ref","key","value","cx","resolveClassNames","_ref2","theme","classNames","props","stylesCtx","arrayClassNames","Array","isArray","resolvedClassNames","map","item"],"sources":["/Users/Zijian/Desktop/fypfull/client/node_modules/@mantine/core/src/core/styles-api/use-styles/get-class-name/resolve-class-names/resolve-class-names.ts"],"sourcesContent":["import cx from 'clsx';\nimport { MantineTheme } from '../../../../MantineProvider';\nimport type { _ClassNames } from '../get-class-name';\n\nexport interface ResolveClassNamesInput {\n  theme: MantineTheme;\n  classNames: _ClassNames;\n  props: Record<string, any>;\n  stylesCtx: Record<string, any> | undefined;\n}\n\nconst EMPTY_CLASS_NAMES: Partial<Record<string, string>> = {};\n\nfunction mergeClassNames(objects: Partial<Record<string, string>>[]) {\n  const merged: Partial<Record<string, string>> = {};\n\n  objects.forEach((obj) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (merged[key]) {\n        merged[key] = cx(merged[key], value);\n      } else {\n        merged[key] = value;\n      }\n    });\n  });\n\n  return merged;\n}\n\nexport function resolveClassNames({ theme, classNames, props, stylesCtx }: ResolveClassNamesInput) {\n  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];\n  const resolvedClassNames = arrayClassNames.map((item) =>\n    typeof item === 'function' ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES\n  );\n\n  return mergeClassNames(resolvedClassNames);\n}\n"],"mappings":";AACA,MAAMA,iBAAiB,GAAG,EAAE;AAC5B,SAASC,eAAeA,CAACC,OAAO,EAAE;EAChC,MAAMC,MAAM,GAAG,EAAE;EACjBD,OAAO,CAACE,OAAO,CAAEC,GAAG,IAAK;IACvBC,MAAM,CAACC,OAAO,CAACF,GAAG,CAAC,CAACD,OAAO,CAACI,IAAA,IAAkB;MAAA,IAAjB,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAAF,IAAA;MACvC,IAAIL,MAAM,CAACM,GAAG,CAAC,EAAE;QACfN,MAAM,CAACM,GAAG,CAAC,GAAGE,EAAE,CAACR,MAAM,CAACM,GAAG,CAAC,EAAEC,KAAK,CAAC;MAC5C,CAAO,MAAM;QACLP,MAAM,CAACM,GAAG,CAAC,GAAGC,KAAK;MAC3B;IACA,CAAK,CAAC;EACN,CAAG,CAAC;EACF,OAAOP,MAAM;AACf;AACO,SAASS,iBAAiBA,CAAAC,KAAA,EAA0C;EAAA,IAAzC;IAAEC,KAAK;IAAEC,UAAU;IAAEC,KAAK;IAAEC;EAAS,CAAE,GAAAJ,KAAA;EACvE,MAAMK,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACL,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;EAC7E,MAAMM,kBAAkB,GAAGH,eAAe,CAACI,GAAG,CAC3CC,IAAI,IAAK,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACT,KAAK,EAAEE,KAAK,EAAEC,SAAS,CAAC,GAAGM,IAAI,IAAIvB,iBAAiB,CACjG;EACD,OAAOC,eAAe,CAACoB,kBAAkB,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}