{"ast":null,"code":"import React from 'react';\nimport { useComboboxContext } from '../Combobox.context.js';\nimport { Popover } from '../../Popover/Popover.js';\nimport { factory } from '../../../core/factory/factory.js';\nimport { useProps } from '../../../core/MantineProvider/use-props/use-props.js';\nimport { isElement } from '../../../core/utils/is-element/is-element.js';\nconst defaultProps = {\n  refProp: \"ref\"\n};\nconst ComboboxDropdownTarget = factory((props, ref) => {\n  const {\n    children,\n    refProp\n  } = useProps(\"ComboboxDropdownTarget\", defaultProps, props);\n  useComboboxContext();\n  if (!isElement(children)) {\n    throw new Error(\"Combobox.DropdownTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported\");\n  }\n  return /* @__PURE__ */React.createElement(Popover.Target, {\n    ref,\n    refProp\n  }, children);\n});\nComboboxDropdownTarget.displayName = \"@mantine/core/ComboboxDropdownTarget\";\nexport { ComboboxDropdownTarget };","map":{"version":3,"names":["defaultProps","refProp","ComboboxDropdownTarget","factory","props","ref","children","useProps","useComboboxContext","isElement","Error","React","createElement","Popover","Target","displayName"],"sources":["/Users/Zijian/Desktop/fypfull/client/node_modules/@mantine/core/src/components/Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.tsx"],"sourcesContent":["import React from 'react';\nimport { Popover } from '../../Popover';\nimport { isElement, useProps, factory, Factory } from '../../../core';\nimport { useComboboxContext } from '../Combobox.context';\n\nexport interface ComboboxDropdownTargetProps {\n  /** Target element */\n  children: React.ReactNode;\n\n  /** Key of the prop that should be used to access element ref */\n  refProp?: string;\n}\n\nconst defaultProps: Partial<ComboboxDropdownTargetProps> = {\n  refProp: 'ref',\n};\n\nexport type ComboboxDropdownTargetFactory = Factory<{\n  props: ComboboxDropdownTargetProps;\n  ref: HTMLElement;\n  compound: true;\n}>;\n\nexport const ComboboxDropdownTarget = factory<ComboboxDropdownTargetFactory>((props, ref) => {\n  const { children, refProp } = useProps('ComboboxDropdownTarget', defaultProps, props);\n  useComboboxContext();\n\n  if (!isElement(children)) {\n    throw new Error(\n      'Combobox.DropdownTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported'\n    );\n  }\n\n  return (\n    <Popover.Target ref={ref} refProp={refProp}>\n      {children}\n    </Popover.Target>\n  );\n});\n\nComboboxDropdownTarget.displayName = '@mantine/core/ComboboxDropdownTarget';\n"],"mappings":";;;;;;AAIA,MAAMA,YAAY,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AACW,MAACC,sBAAsB,GAAGC,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;EAC5D,MAAM;IAAEC,QAAQ;IAAEL;EAAO,CAAE,GAAGM,QAAQ,CAAC,wBAAwB,EAAEP,YAAY,EAAEI,KAAK,CAAC;EACrFI,kBAAkB,EAAE;EACpB,IAAI,CAACC,SAAS,CAACH,QAAQ,CAAC,EAAE;IACxB,MAAM,IAAII,KAAK,CACb,2KAA2K,CAC5K;EACL;EACE,sBAAuBC,KAAK,CAACC,aAAa,CAACC,OAAO,CAACC,MAAM,EAAE;IAAET,GAAG;IAAEJ;EAAO,CAAE,EAAEK,QAAQ,CAAC;AACxF,CAAC;AACDJ,sBAAsB,CAACa,WAAW,GAAG,sCAAsC"},"metadata":{},"sourceType":"module","externalDependencies":[]}